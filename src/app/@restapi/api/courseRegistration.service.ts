/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Course } from '../model/course';
import { CourseRegistration } from '../model/courseRegistration';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class CourseRegistrationService {

    protected basePath = 'http://gauramargrest.appspot.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getByCourseId
     * 
     * @param courseId courseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByCourseIdUsingGET1(courseId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CourseRegistration>>;
    public getByCourseIdUsingGET1(courseId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CourseRegistration>>>;
    public getByCourseIdUsingGET1(courseId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CourseRegistration>>>;
    public getByCourseIdUsingGET1(courseId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getByCourseIdUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CourseRegistration>>(`${this.configuration.basePath}/courseRegistration/courseId/${encodeURIComponent(String(courseId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getByStudentId
     * 
     * @param studentId studentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByStudentIdUsingGET1(studentId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CourseRegistration>>;
    public getByStudentIdUsingGET1(studentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CourseRegistration>>>;
    public getByStudentIdUsingGET1(studentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CourseRegistration>>>;
    public getByStudentIdUsingGET1(studentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (studentId === null || studentId === undefined) {
            throw new Error('Required parameter studentId was null or undefined when calling getByStudentIdUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CourseRegistration>>(`${this.configuration.basePath}/courseRegistration/studentId/${encodeURIComponent(String(studentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getByTeacherId
     * 
     * @param teacherId teacherId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByTeacherIdUsingGET2(teacherId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CourseRegistration>>;
    public getByTeacherIdUsingGET2(teacherId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CourseRegistration>>>;
    public getByTeacherIdUsingGET2(teacherId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CourseRegistration>>>;
    public getByTeacherIdUsingGET2(teacherId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (teacherId === null || teacherId === undefined) {
            throw new Error('Required parameter teacherId was null or undefined when calling getByTeacherIdUsingGET2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CourseRegistration>>(`${this.configuration.basePath}/courseRegistration/teacherId/${encodeURIComponent(String(teacherId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCoursesByStudentId
     * 
     * @param studentId studentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCoursesByStudentIdUsingGET(studentId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Course>>;
    public getCoursesByStudentIdUsingGET(studentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Course>>>;
    public getCoursesByStudentIdUsingGET(studentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Course>>>;
    public getCoursesByStudentIdUsingGET(studentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (studentId === null || studentId === undefined) {
            throw new Error('Required parameter studentId was null or undefined when calling getCoursesByStudentIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Course>>(`${this.configuration.basePath}/courseRegistration/coursesByStudentId/${encodeURIComponent(String(studentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCoursesByTeacherId
     * 
     * @param teacherId teacherId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCoursesByTeacherIdUsingGET(teacherId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Course>>;
    public getCoursesByTeacherIdUsingGET(teacherId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Course>>>;
    public getCoursesByTeacherIdUsingGET(teacherId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Course>>>;
    public getCoursesByTeacherIdUsingGET(teacherId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (teacherId === null || teacherId === undefined) {
            throw new Error('Required parameter teacherId was null or undefined when calling getCoursesByTeacherIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Course>>(`${this.configuration.basePath}/courseRegistration/coursesByTeacherId/${encodeURIComponent(String(teacherId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getStudentsByCourseId
     * 
     * @param courseId courseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStudentsByCourseIdUsingGET(courseId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getStudentsByCourseIdUsingGET(courseId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getStudentsByCourseIdUsingGET(courseId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getStudentsByCourseIdUsingGET(courseId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getStudentsByCourseIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.configuration.basePath}/courseRegistration/studentsByCourseId/${encodeURIComponent(String(courseId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getStudentsByTeacherId
     * 
     * @param teacherId teacherId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStudentsByTeacherIdUsingGET(teacherId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getStudentsByTeacherIdUsingGET(teacherId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getStudentsByTeacherIdUsingGET(teacherId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getStudentsByTeacherIdUsingGET(teacherId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (teacherId === null || teacherId === undefined) {
            throw new Error('Required parameter teacherId was null or undefined when calling getStudentsByTeacherIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.configuration.basePath}/courseRegistration/studentsByTeacherId/${encodeURIComponent(String(teacherId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsingGET2(observe?: 'body', reportProgress?: boolean): Observable<Array<CourseRegistration>>;
    public getUsingGET2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CourseRegistration>>>;
    public getUsingGET2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CourseRegistration>>>;
    public getUsingGET2(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CourseRegistration>>(`${this.configuration.basePath}/courseRegistration`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
