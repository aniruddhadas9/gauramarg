/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { Holi } from '../model/holi';
import { Message } from '../model/message';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class HoliService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * allCreate
     * @param holis holis
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allCreateUsingPOST(holis: Array<Holi>, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public allCreateUsingPOST(holis: Array<Holi>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public allCreateUsingPOST(holis: Array<Holi>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public allCreateUsingPOST(holis: Array<Holi>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (holis === null || holis === undefined) {
            throw new Error('Required parameter holis was null or undefined when calling allCreateUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Message>(`${this.configuration.basePath}/holi/allCreate`,
            holis,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * allUpdate
     * @param holis holis
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allUpdateUsingPOST(holis: Array<Holi>, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public allUpdateUsingPOST(holis: Array<Holi>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public allUpdateUsingPOST(holis: Array<Holi>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public allUpdateUsingPOST(holis: Array<Holi>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (holis === null || holis === undefined) {
            throw new Error('Required parameter holis was null or undefined when calling allUpdateUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Message>(`${this.configuration.basePath}/holi/allUpdate`,
            holis,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUsingDELETE3(id: string, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public deleteUsingDELETE3(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public deleteUsingDELETE3(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public deleteUsingDELETE3(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<Message>(`${this.configuration.basePath}/holi/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getHoliByDoorcode
     * @param doorCode doorCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHoliByDoorcodeUsingGET(doorCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Holi>>;
    public getHoliByDoorcodeUsingGET(doorCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Holi>>>;
    public getHoliByDoorcodeUsingGET(doorCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Holi>>>;
    public getHoliByDoorcodeUsingGET(doorCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (doorCode === null || doorCode === undefined) {
            throw new Error('Required parameter doorCode was null or undefined when calling getHoliByDoorcodeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Holi>>(`${this.configuration.basePath}/holi/doorCode/${encodeURIComponent(String(doorCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getHoliByEmailPost
     * @param email email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHoliByEmailPostUsingPOST(email: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Holi>>;
    public getHoliByEmailPostUsingPOST(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Holi>>>;
    public getHoliByEmailPostUsingPOST(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Holi>>>;
    public getHoliByEmailPostUsingPOST(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling getHoliByEmailPostUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Holi>>(`${this.configuration.basePath}/holi/email`,
            email,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getHoliByEmail
     * @param email email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHoliByEmailUsingGET(email: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Holi>>;
    public getHoliByEmailUsingGET(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Holi>>>;
    public getHoliByEmailUsingGET(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Holi>>>;
    public getHoliByEmailUsingGET(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling getHoliByEmailUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Holi>>(`${this.configuration.basePath}/holi/email/${encodeURIComponent(String(email))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getHoliByName
     * @param name name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHoliByNameUsingGET(name: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Holi>>;
    public getHoliByNameUsingGET(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Holi>>>;
    public getHoliByNameUsingGET(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Holi>>>;
    public getHoliByNameUsingGET(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getHoliByNameUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Holi>>(`${this.configuration.basePath}/holi/name/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getHolisByBarcode
     * @param barCode barCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHolisByBarcodeUsingGET(barCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Holi>>;
    public getHolisByBarcodeUsingGET(barCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Holi>>>;
    public getHolisByBarcodeUsingGET(barCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Holi>>>;
    public getHolisByBarcodeUsingGET(barCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (barCode === null || barCode === undefined) {
            throw new Error('Required parameter barCode was null or undefined when calling getHolisByBarcodeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Holi>>(`${this.configuration.basePath}/holi/barCode/${encodeURIComponent(String(barCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getHolisByCity
     * @param city city
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHolisByCityUsingGET(city: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Holi>>;
    public getHolisByCityUsingGET(city: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Holi>>>;
    public getHolisByCityUsingGET(city: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Holi>>>;
    public getHolisByCityUsingGET(city: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling getHolisByCityUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Holi>>(`${this.configuration.basePath}/holi/city/${encodeURIComponent(String(city))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getHolisByPostcode
     * @param postCode postCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHolisByPostcodeUsingGET(postCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Holi>>;
    public getHolisByPostcodeUsingGET(postCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Holi>>>;
    public getHolisByPostcodeUsingGET(postCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Holi>>>;
    public getHolisByPostcodeUsingGET(postCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (postCode === null || postCode === undefined) {
            throw new Error('Required parameter postCode was null or undefined when calling getHolisByPostcodeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Holi>>(`${this.configuration.basePath}/holi/postCode/${encodeURIComponent(String(postCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsingGET3(id: string, observe?: 'body', reportProgress?: boolean): Observable<Holi>;
    public getUsingGET3(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Holi>>;
    public getUsingGET3(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Holi>>;
    public getUsingGET3(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUsingGET3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Holi>(`${this.configuration.basePath}/holi/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsingGET4(observe?: 'body', reportProgress?: boolean): Observable<Array<Holi>>;
    public getUsingGET4(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Holi>>>;
    public getUsingGET4(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Holi>>>;
    public getUsingGET4(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Holi>>(`${this.configuration.basePath}/holi`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * post
     * @param holi holi
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postUsingPOST3(holi: Holi, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public postUsingPOST3(holi: Holi, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public postUsingPOST3(holi: Holi, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public postUsingPOST3(holi: Holi, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (holi === null || holi === undefined) {
            throw new Error('Required parameter holi was null or undefined when calling postUsingPOST3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Message>(`${this.configuration.basePath}/holi`,
            holi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * put
     * @param holi holi
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putUsingPUT3(holi: Holi, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public putUsingPUT3(holi: Holi, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public putUsingPUT3(holi: Holi, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public putUsingPUT3(holi: Holi, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (holi === null || holi === undefined) {
            throw new Error('Required parameter holi was null or undefined when calling putUsingPUT3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Message>(`${this.configuration.basePath}/holi`,
            holi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update
     * @param holi holi
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUsingPOST(holi: Holi, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public updateUsingPOST(holi: Holi, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public updateUsingPOST(holi: Holi, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public updateUsingPOST(holi: Holi, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (holi === null || holi === undefined) {
            throw new Error('Required parameter holi was null or undefined when calling updateUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Message>(`${this.configuration.basePath}/holi/update`,
            holi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
