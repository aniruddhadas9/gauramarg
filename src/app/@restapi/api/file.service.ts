/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Resource } from '../model/resource';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class FileService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * handleFileUpload
     * 
     * @param file file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleFileUploadUsingPOST(file: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public handleFileUploadUsingPOST(file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public handleFileUploadUsingPOST(file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public handleFileUploadUsingPOST(file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling handleFileUploadUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) as any || formParams;
        }

        return this.httpClient.post<string>(`${this.configuration.basePath}/file/`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listUploadedFiles
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUploadedFilesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public listUploadedFilesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public listUploadedFilesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public listUploadedFilesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/file/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * serveFile
     * 
     * @param filename filename
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serveFileUsingGET(filename: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public serveFileUsingGET(filename: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public serveFileUsingGET(filename: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public serveFileUsingGET(filename: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling serveFileUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Resource>(`${this.configuration.basePath}/file/${encodeURIComponent(String(filename))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * UploadFile
     * 
     * @param requestHeadersETag 
     * @param requestHeadersAcceptCharset0Registered 
     * @param requestHeadersAcceptLanguageAsLocales0ISO3Country 
     * @param requestHeadersAcceptLanguageAsLocales0ISO3Language 
     * @param requestHeadersAcceptLanguageAsLocales0Country 
     * @param requestHeadersAcceptLanguageAsLocales0DisplayCountry 
     * @param requestHeadersAcceptLanguageAsLocales0DisplayLanguage 
     * @param requestHeadersAcceptLanguageAsLocales0DisplayName 
     * @param requestHeadersAcceptLanguageAsLocales0DisplayScript 
     * @param requestHeadersAcceptLanguageAsLocales0DisplayVariant 
     * @param requestHeadersAcceptLanguageAsLocales0Language 
     * @param requestHeadersAcceptLanguageAsLocales0Script 
     * @param requestHeadersAcceptLanguageAsLocales0UnicodeLocaleAttributes 
     * @param requestHeadersAcceptLanguageAsLocales0UnicodeLocaleKeys 
     * @param requestHeadersAcceptLanguageAsLocales0Variant 
     * @param requestHeadersAcceptLanguage0Range 
     * @param requestHeadersAcceptLanguage0Weight 
     * @param requestHeadersAccept0CharsetRegistered 
     * @param requestHeadersAccept0Concrete 
     * @param requestHeadersAccept0QualityValue 
     * @param requestHeadersAccept0Subtype 
     * @param requestHeadersAccept0Type 
     * @param requestHeadersAccept0WildcardSubtype 
     * @param requestHeadersAccept0WildcardType 
     * @param requestHeadersAccessControlAllowCredentials 
     * @param requestHeadersAccessControlAllowHeaders 
     * @param requestHeadersAccessControlAllowMethods 
     * @param requestHeadersAccessControlAllowOrigin 
     * @param requestHeadersAccessControlExposeHeaders 
     * @param requestHeadersAccessControlMaxAge 
     * @param requestHeadersAccessControlRequestHeaders 
     * @param requestHeadersAccessControlRequestMethod 
     * @param requestHeadersAllow 
     * @param requestHeadersCacheControl 
     * @param requestHeadersConnection 
     * @param requestHeadersContentDispositionCharsetRegistered 
     * @param requestHeadersContentDispositionCreationDate 
     * @param requestHeadersContentDispositionFilename 
     * @param requestHeadersContentDispositionModificationDate 
     * @param requestHeadersContentDispositionName 
     * @param requestHeadersContentDispositionReadDate 
     * @param requestHeadersContentDispositionSize 
     * @param requestHeadersContentDispositionType 
     * @param requestHeadersContentLanguageISO3Country 
     * @param requestHeadersContentLanguageISO3Language 
     * @param requestHeadersContentLanguageCountry 
     * @param requestHeadersContentLanguageDisplayCountry 
     * @param requestHeadersContentLanguageDisplayLanguage 
     * @param requestHeadersContentLanguageDisplayName 
     * @param requestHeadersContentLanguageDisplayScript 
     * @param requestHeadersContentLanguageDisplayVariant 
     * @param requestHeadersContentLanguageLanguage 
     * @param requestHeadersContentLanguageScript 
     * @param requestHeadersContentLanguageUnicodeLocaleAttributes 
     * @param requestHeadersContentLanguageUnicodeLocaleKeys 
     * @param requestHeadersContentLanguageVariant 
     * @param requestHeadersContentLength 
     * @param requestHeadersContentTypeCharsetRegistered 
     * @param requestHeadersContentTypeConcrete 
     * @param requestHeadersContentTypeQualityValue 
     * @param requestHeadersContentTypeSubtype 
     * @param requestHeadersContentTypeType 
     * @param requestHeadersContentTypeWildcardSubtype 
     * @param requestHeadersContentTypeWildcardType 
     * @param requestHeadersDate 
     * @param requestHeadersExpires 
     * @param requestHeadersHostAddressMCGlobal 
     * @param requestHeadersHostAddressMCLinkLocal 
     * @param requestHeadersHostAddressMCNodeLocal 
     * @param requestHeadersHostAddressMCOrgLocal 
     * @param requestHeadersHostAddressMCSiteLocal 
     * @param requestHeadersHostAddressAddress 
     * @param requestHeadersHostAddressAnyLocalAddress 
     * @param requestHeadersHostAddressCanonicalHostName 
     * @param requestHeadersHostAddressHostAddress 
     * @param requestHeadersHostAddressHostName 
     * @param requestHeadersHostAddressLinkLocalAddress 
     * @param requestHeadersHostAddressLoopbackAddress 
     * @param requestHeadersHostAddressMulticastAddress 
     * @param requestHeadersHostAddressSiteLocalAddress 
     * @param requestHeadersHostHostName 
     * @param requestHeadersHostHostString 
     * @param requestHeadersHostPort 
     * @param requestHeadersHostUnresolved 
     * @param requestHeadersIfMatch 
     * @param requestHeadersIfModifiedSince 
     * @param requestHeadersIfNoneMatch 
     * @param requestHeadersIfUnmodifiedSince 
     * @param requestHeadersLastModified 
     * @param requestHeadersLocationAbsolute 
     * @param requestHeadersLocationAuthority 
     * @param requestHeadersLocationFragment 
     * @param requestHeadersLocationHost 
     * @param requestHeadersLocationOpaque 
     * @param requestHeadersLocationPath 
     * @param requestHeadersLocationPort 
     * @param requestHeadersLocationQuery 
     * @param requestHeadersLocationRawAuthority 
     * @param requestHeadersLocationRawFragment 
     * @param requestHeadersLocationRawPath 
     * @param requestHeadersLocationRawQuery 
     * @param requestHeadersLocationRawSchemeSpecificPart 
     * @param requestHeadersLocationRawUserInfo 
     * @param requestHeadersLocationScheme 
     * @param requestHeadersLocationSchemeSpecificPart 
     * @param requestHeadersLocationUserInfo 
     * @param requestHeadersOrigin 
     * @param requestHeadersPragma 
     * @param requestHeadersUpgrade 
     * @param requestHeadersVary 
     * @param requestMethod 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadFileUsingPOST(requestHeadersETag?: string, requestHeadersAcceptCharset0Registered?: boolean, requestHeadersAcceptLanguageAsLocales0ISO3Country?: string, requestHeadersAcceptLanguageAsLocales0ISO3Language?: string, requestHeadersAcceptLanguageAsLocales0Country?: string, requestHeadersAcceptLanguageAsLocales0DisplayCountry?: string, requestHeadersAcceptLanguageAsLocales0DisplayLanguage?: string, requestHeadersAcceptLanguageAsLocales0DisplayName?: string, requestHeadersAcceptLanguageAsLocales0DisplayScript?: string, requestHeadersAcceptLanguageAsLocales0DisplayVariant?: string, requestHeadersAcceptLanguageAsLocales0Language?: string, requestHeadersAcceptLanguageAsLocales0Script?: string, requestHeadersAcceptLanguageAsLocales0UnicodeLocaleAttributes?: Array<string>, requestHeadersAcceptLanguageAsLocales0UnicodeLocaleKeys?: Array<string>, requestHeadersAcceptLanguageAsLocales0Variant?: string, requestHeadersAcceptLanguage0Range?: string, requestHeadersAcceptLanguage0Weight?: number, requestHeadersAccept0CharsetRegistered?: boolean, requestHeadersAccept0Concrete?: boolean, requestHeadersAccept0QualityValue?: number, requestHeadersAccept0Subtype?: string, requestHeadersAccept0Type?: string, requestHeadersAccept0WildcardSubtype?: boolean, requestHeadersAccept0WildcardType?: boolean, requestHeadersAccessControlAllowCredentials?: boolean, requestHeadersAccessControlAllowHeaders?: Array<string>, requestHeadersAccessControlAllowMethods?: Array<'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE'>, requestHeadersAccessControlAllowOrigin?: string, requestHeadersAccessControlExposeHeaders?: Array<string>, requestHeadersAccessControlMaxAge?: number, requestHeadersAccessControlRequestHeaders?: Array<string>, requestHeadersAccessControlRequestMethod?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE', requestHeadersAllow?: Array<'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE'>, requestHeadersCacheControl?: string, requestHeadersConnection?: Array<string>, requestHeadersContentDispositionCharsetRegistered?: boolean, requestHeadersContentDispositionCreationDate?: Date, requestHeadersContentDispositionFilename?: string, requestHeadersContentDispositionModificationDate?: Date, requestHeadersContentDispositionName?: string, requestHeadersContentDispositionReadDate?: Date, requestHeadersContentDispositionSize?: number, requestHeadersContentDispositionType?: string, requestHeadersContentLanguageISO3Country?: string, requestHeadersContentLanguageISO3Language?: string, requestHeadersContentLanguageCountry?: string, requestHeadersContentLanguageDisplayCountry?: string, requestHeadersContentLanguageDisplayLanguage?: string, requestHeadersContentLanguageDisplayName?: string, requestHeadersContentLanguageDisplayScript?: string, requestHeadersContentLanguageDisplayVariant?: string, requestHeadersContentLanguageLanguage?: string, requestHeadersContentLanguageScript?: string, requestHeadersContentLanguageUnicodeLocaleAttributes?: Array<string>, requestHeadersContentLanguageUnicodeLocaleKeys?: Array<string>, requestHeadersContentLanguageVariant?: string, requestHeadersContentLength?: number, requestHeadersContentTypeCharsetRegistered?: boolean, requestHeadersContentTypeConcrete?: boolean, requestHeadersContentTypeQualityValue?: number, requestHeadersContentTypeSubtype?: string, requestHeadersContentTypeType?: string, requestHeadersContentTypeWildcardSubtype?: boolean, requestHeadersContentTypeWildcardType?: boolean, requestHeadersDate?: number, requestHeadersExpires?: number, requestHeadersHostAddressMCGlobal?: boolean, requestHeadersHostAddressMCLinkLocal?: boolean, requestHeadersHostAddressMCNodeLocal?: boolean, requestHeadersHostAddressMCOrgLocal?: boolean, requestHeadersHostAddressMCSiteLocal?: boolean, requestHeadersHostAddressAddress?: string, requestHeadersHostAddressAnyLocalAddress?: boolean, requestHeadersHostAddressCanonicalHostName?: string, requestHeadersHostAddressHostAddress?: string, requestHeadersHostAddressHostName?: string, requestHeadersHostAddressLinkLocalAddress?: boolean, requestHeadersHostAddressLoopbackAddress?: boolean, requestHeadersHostAddressMulticastAddress?: boolean, requestHeadersHostAddressSiteLocalAddress?: boolean, requestHeadersHostHostName?: string, requestHeadersHostHostString?: string, requestHeadersHostPort?: number, requestHeadersHostUnresolved?: boolean, requestHeadersIfMatch?: Array<string>, requestHeadersIfModifiedSince?: number, requestHeadersIfNoneMatch?: Array<string>, requestHeadersIfUnmodifiedSince?: number, requestHeadersLastModified?: number, requestHeadersLocationAbsolute?: boolean, requestHeadersLocationAuthority?: string, requestHeadersLocationFragment?: string, requestHeadersLocationHost?: string, requestHeadersLocationOpaque?: boolean, requestHeadersLocationPath?: string, requestHeadersLocationPort?: number, requestHeadersLocationQuery?: string, requestHeadersLocationRawAuthority?: string, requestHeadersLocationRawFragment?: string, requestHeadersLocationRawPath?: string, requestHeadersLocationRawQuery?: string, requestHeadersLocationRawSchemeSpecificPart?: string, requestHeadersLocationRawUserInfo?: string, requestHeadersLocationScheme?: string, requestHeadersLocationSchemeSpecificPart?: string, requestHeadersLocationUserInfo?: string, requestHeadersOrigin?: string, requestHeadersPragma?: string, requestHeadersUpgrade?: string, requestHeadersVary?: Array<string>, requestMethod?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE', observe?: 'body', reportProgress?: boolean): Observable<string>;
    public uploadFileUsingPOST(requestHeadersETag?: string, requestHeadersAcceptCharset0Registered?: boolean, requestHeadersAcceptLanguageAsLocales0ISO3Country?: string, requestHeadersAcceptLanguageAsLocales0ISO3Language?: string, requestHeadersAcceptLanguageAsLocales0Country?: string, requestHeadersAcceptLanguageAsLocales0DisplayCountry?: string, requestHeadersAcceptLanguageAsLocales0DisplayLanguage?: string, requestHeadersAcceptLanguageAsLocales0DisplayName?: string, requestHeadersAcceptLanguageAsLocales0DisplayScript?: string, requestHeadersAcceptLanguageAsLocales0DisplayVariant?: string, requestHeadersAcceptLanguageAsLocales0Language?: string, requestHeadersAcceptLanguageAsLocales0Script?: string, requestHeadersAcceptLanguageAsLocales0UnicodeLocaleAttributes?: Array<string>, requestHeadersAcceptLanguageAsLocales0UnicodeLocaleKeys?: Array<string>, requestHeadersAcceptLanguageAsLocales0Variant?: string, requestHeadersAcceptLanguage0Range?: string, requestHeadersAcceptLanguage0Weight?: number, requestHeadersAccept0CharsetRegistered?: boolean, requestHeadersAccept0Concrete?: boolean, requestHeadersAccept0QualityValue?: number, requestHeadersAccept0Subtype?: string, requestHeadersAccept0Type?: string, requestHeadersAccept0WildcardSubtype?: boolean, requestHeadersAccept0WildcardType?: boolean, requestHeadersAccessControlAllowCredentials?: boolean, requestHeadersAccessControlAllowHeaders?: Array<string>, requestHeadersAccessControlAllowMethods?: Array<'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE'>, requestHeadersAccessControlAllowOrigin?: string, requestHeadersAccessControlExposeHeaders?: Array<string>, requestHeadersAccessControlMaxAge?: number, requestHeadersAccessControlRequestHeaders?: Array<string>, requestHeadersAccessControlRequestMethod?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE', requestHeadersAllow?: Array<'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE'>, requestHeadersCacheControl?: string, requestHeadersConnection?: Array<string>, requestHeadersContentDispositionCharsetRegistered?: boolean, requestHeadersContentDispositionCreationDate?: Date, requestHeadersContentDispositionFilename?: string, requestHeadersContentDispositionModificationDate?: Date, requestHeadersContentDispositionName?: string, requestHeadersContentDispositionReadDate?: Date, requestHeadersContentDispositionSize?: number, requestHeadersContentDispositionType?: string, requestHeadersContentLanguageISO3Country?: string, requestHeadersContentLanguageISO3Language?: string, requestHeadersContentLanguageCountry?: string, requestHeadersContentLanguageDisplayCountry?: string, requestHeadersContentLanguageDisplayLanguage?: string, requestHeadersContentLanguageDisplayName?: string, requestHeadersContentLanguageDisplayScript?: string, requestHeadersContentLanguageDisplayVariant?: string, requestHeadersContentLanguageLanguage?: string, requestHeadersContentLanguageScript?: string, requestHeadersContentLanguageUnicodeLocaleAttributes?: Array<string>, requestHeadersContentLanguageUnicodeLocaleKeys?: Array<string>, requestHeadersContentLanguageVariant?: string, requestHeadersContentLength?: number, requestHeadersContentTypeCharsetRegistered?: boolean, requestHeadersContentTypeConcrete?: boolean, requestHeadersContentTypeQualityValue?: number, requestHeadersContentTypeSubtype?: string, requestHeadersContentTypeType?: string, requestHeadersContentTypeWildcardSubtype?: boolean, requestHeadersContentTypeWildcardType?: boolean, requestHeadersDate?: number, requestHeadersExpires?: number, requestHeadersHostAddressMCGlobal?: boolean, requestHeadersHostAddressMCLinkLocal?: boolean, requestHeadersHostAddressMCNodeLocal?: boolean, requestHeadersHostAddressMCOrgLocal?: boolean, requestHeadersHostAddressMCSiteLocal?: boolean, requestHeadersHostAddressAddress?: string, requestHeadersHostAddressAnyLocalAddress?: boolean, requestHeadersHostAddressCanonicalHostName?: string, requestHeadersHostAddressHostAddress?: string, requestHeadersHostAddressHostName?: string, requestHeadersHostAddressLinkLocalAddress?: boolean, requestHeadersHostAddressLoopbackAddress?: boolean, requestHeadersHostAddressMulticastAddress?: boolean, requestHeadersHostAddressSiteLocalAddress?: boolean, requestHeadersHostHostName?: string, requestHeadersHostHostString?: string, requestHeadersHostPort?: number, requestHeadersHostUnresolved?: boolean, requestHeadersIfMatch?: Array<string>, requestHeadersIfModifiedSince?: number, requestHeadersIfNoneMatch?: Array<string>, requestHeadersIfUnmodifiedSince?: number, requestHeadersLastModified?: number, requestHeadersLocationAbsolute?: boolean, requestHeadersLocationAuthority?: string, requestHeadersLocationFragment?: string, requestHeadersLocationHost?: string, requestHeadersLocationOpaque?: boolean, requestHeadersLocationPath?: string, requestHeadersLocationPort?: number, requestHeadersLocationQuery?: string, requestHeadersLocationRawAuthority?: string, requestHeadersLocationRawFragment?: string, requestHeadersLocationRawPath?: string, requestHeadersLocationRawQuery?: string, requestHeadersLocationRawSchemeSpecificPart?: string, requestHeadersLocationRawUserInfo?: string, requestHeadersLocationScheme?: string, requestHeadersLocationSchemeSpecificPart?: string, requestHeadersLocationUserInfo?: string, requestHeadersOrigin?: string, requestHeadersPragma?: string, requestHeadersUpgrade?: string, requestHeadersVary?: Array<string>, requestMethod?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public uploadFileUsingPOST(requestHeadersETag?: string, requestHeadersAcceptCharset0Registered?: boolean, requestHeadersAcceptLanguageAsLocales0ISO3Country?: string, requestHeadersAcceptLanguageAsLocales0ISO3Language?: string, requestHeadersAcceptLanguageAsLocales0Country?: string, requestHeadersAcceptLanguageAsLocales0DisplayCountry?: string, requestHeadersAcceptLanguageAsLocales0DisplayLanguage?: string, requestHeadersAcceptLanguageAsLocales0DisplayName?: string, requestHeadersAcceptLanguageAsLocales0DisplayScript?: string, requestHeadersAcceptLanguageAsLocales0DisplayVariant?: string, requestHeadersAcceptLanguageAsLocales0Language?: string, requestHeadersAcceptLanguageAsLocales0Script?: string, requestHeadersAcceptLanguageAsLocales0UnicodeLocaleAttributes?: Array<string>, requestHeadersAcceptLanguageAsLocales0UnicodeLocaleKeys?: Array<string>, requestHeadersAcceptLanguageAsLocales0Variant?: string, requestHeadersAcceptLanguage0Range?: string, requestHeadersAcceptLanguage0Weight?: number, requestHeadersAccept0CharsetRegistered?: boolean, requestHeadersAccept0Concrete?: boolean, requestHeadersAccept0QualityValue?: number, requestHeadersAccept0Subtype?: string, requestHeadersAccept0Type?: string, requestHeadersAccept0WildcardSubtype?: boolean, requestHeadersAccept0WildcardType?: boolean, requestHeadersAccessControlAllowCredentials?: boolean, requestHeadersAccessControlAllowHeaders?: Array<string>, requestHeadersAccessControlAllowMethods?: Array<'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE'>, requestHeadersAccessControlAllowOrigin?: string, requestHeadersAccessControlExposeHeaders?: Array<string>, requestHeadersAccessControlMaxAge?: number, requestHeadersAccessControlRequestHeaders?: Array<string>, requestHeadersAccessControlRequestMethod?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE', requestHeadersAllow?: Array<'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE'>, requestHeadersCacheControl?: string, requestHeadersConnection?: Array<string>, requestHeadersContentDispositionCharsetRegistered?: boolean, requestHeadersContentDispositionCreationDate?: Date, requestHeadersContentDispositionFilename?: string, requestHeadersContentDispositionModificationDate?: Date, requestHeadersContentDispositionName?: string, requestHeadersContentDispositionReadDate?: Date, requestHeadersContentDispositionSize?: number, requestHeadersContentDispositionType?: string, requestHeadersContentLanguageISO3Country?: string, requestHeadersContentLanguageISO3Language?: string, requestHeadersContentLanguageCountry?: string, requestHeadersContentLanguageDisplayCountry?: string, requestHeadersContentLanguageDisplayLanguage?: string, requestHeadersContentLanguageDisplayName?: string, requestHeadersContentLanguageDisplayScript?: string, requestHeadersContentLanguageDisplayVariant?: string, requestHeadersContentLanguageLanguage?: string, requestHeadersContentLanguageScript?: string, requestHeadersContentLanguageUnicodeLocaleAttributes?: Array<string>, requestHeadersContentLanguageUnicodeLocaleKeys?: Array<string>, requestHeadersContentLanguageVariant?: string, requestHeadersContentLength?: number, requestHeadersContentTypeCharsetRegistered?: boolean, requestHeadersContentTypeConcrete?: boolean, requestHeadersContentTypeQualityValue?: number, requestHeadersContentTypeSubtype?: string, requestHeadersContentTypeType?: string, requestHeadersContentTypeWildcardSubtype?: boolean, requestHeadersContentTypeWildcardType?: boolean, requestHeadersDate?: number, requestHeadersExpires?: number, requestHeadersHostAddressMCGlobal?: boolean, requestHeadersHostAddressMCLinkLocal?: boolean, requestHeadersHostAddressMCNodeLocal?: boolean, requestHeadersHostAddressMCOrgLocal?: boolean, requestHeadersHostAddressMCSiteLocal?: boolean, requestHeadersHostAddressAddress?: string, requestHeadersHostAddressAnyLocalAddress?: boolean, requestHeadersHostAddressCanonicalHostName?: string, requestHeadersHostAddressHostAddress?: string, requestHeadersHostAddressHostName?: string, requestHeadersHostAddressLinkLocalAddress?: boolean, requestHeadersHostAddressLoopbackAddress?: boolean, requestHeadersHostAddressMulticastAddress?: boolean, requestHeadersHostAddressSiteLocalAddress?: boolean, requestHeadersHostHostName?: string, requestHeadersHostHostString?: string, requestHeadersHostPort?: number, requestHeadersHostUnresolved?: boolean, requestHeadersIfMatch?: Array<string>, requestHeadersIfModifiedSince?: number, requestHeadersIfNoneMatch?: Array<string>, requestHeadersIfUnmodifiedSince?: number, requestHeadersLastModified?: number, requestHeadersLocationAbsolute?: boolean, requestHeadersLocationAuthority?: string, requestHeadersLocationFragment?: string, requestHeadersLocationHost?: string, requestHeadersLocationOpaque?: boolean, requestHeadersLocationPath?: string, requestHeadersLocationPort?: number, requestHeadersLocationQuery?: string, requestHeadersLocationRawAuthority?: string, requestHeadersLocationRawFragment?: string, requestHeadersLocationRawPath?: string, requestHeadersLocationRawQuery?: string, requestHeadersLocationRawSchemeSpecificPart?: string, requestHeadersLocationRawUserInfo?: string, requestHeadersLocationScheme?: string, requestHeadersLocationSchemeSpecificPart?: string, requestHeadersLocationUserInfo?: string, requestHeadersOrigin?: string, requestHeadersPragma?: string, requestHeadersUpgrade?: string, requestHeadersVary?: Array<string>, requestMethod?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public uploadFileUsingPOST(requestHeadersETag?: string, requestHeadersAcceptCharset0Registered?: boolean, requestHeadersAcceptLanguageAsLocales0ISO3Country?: string, requestHeadersAcceptLanguageAsLocales0ISO3Language?: string, requestHeadersAcceptLanguageAsLocales0Country?: string, requestHeadersAcceptLanguageAsLocales0DisplayCountry?: string, requestHeadersAcceptLanguageAsLocales0DisplayLanguage?: string, requestHeadersAcceptLanguageAsLocales0DisplayName?: string, requestHeadersAcceptLanguageAsLocales0DisplayScript?: string, requestHeadersAcceptLanguageAsLocales0DisplayVariant?: string, requestHeadersAcceptLanguageAsLocales0Language?: string, requestHeadersAcceptLanguageAsLocales0Script?: string, requestHeadersAcceptLanguageAsLocales0UnicodeLocaleAttributes?: Array<string>, requestHeadersAcceptLanguageAsLocales0UnicodeLocaleKeys?: Array<string>, requestHeadersAcceptLanguageAsLocales0Variant?: string, requestHeadersAcceptLanguage0Range?: string, requestHeadersAcceptLanguage0Weight?: number, requestHeadersAccept0CharsetRegistered?: boolean, requestHeadersAccept0Concrete?: boolean, requestHeadersAccept0QualityValue?: number, requestHeadersAccept0Subtype?: string, requestHeadersAccept0Type?: string, requestHeadersAccept0WildcardSubtype?: boolean, requestHeadersAccept0WildcardType?: boolean, requestHeadersAccessControlAllowCredentials?: boolean, requestHeadersAccessControlAllowHeaders?: Array<string>, requestHeadersAccessControlAllowMethods?: Array<'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE'>, requestHeadersAccessControlAllowOrigin?: string, requestHeadersAccessControlExposeHeaders?: Array<string>, requestHeadersAccessControlMaxAge?: number, requestHeadersAccessControlRequestHeaders?: Array<string>, requestHeadersAccessControlRequestMethod?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE', requestHeadersAllow?: Array<'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE'>, requestHeadersCacheControl?: string, requestHeadersConnection?: Array<string>, requestHeadersContentDispositionCharsetRegistered?: boolean, requestHeadersContentDispositionCreationDate?: Date, requestHeadersContentDispositionFilename?: string, requestHeadersContentDispositionModificationDate?: Date, requestHeadersContentDispositionName?: string, requestHeadersContentDispositionReadDate?: Date, requestHeadersContentDispositionSize?: number, requestHeadersContentDispositionType?: string, requestHeadersContentLanguageISO3Country?: string, requestHeadersContentLanguageISO3Language?: string, requestHeadersContentLanguageCountry?: string, requestHeadersContentLanguageDisplayCountry?: string, requestHeadersContentLanguageDisplayLanguage?: string, requestHeadersContentLanguageDisplayName?: string, requestHeadersContentLanguageDisplayScript?: string, requestHeadersContentLanguageDisplayVariant?: string, requestHeadersContentLanguageLanguage?: string, requestHeadersContentLanguageScript?: string, requestHeadersContentLanguageUnicodeLocaleAttributes?: Array<string>, requestHeadersContentLanguageUnicodeLocaleKeys?: Array<string>, requestHeadersContentLanguageVariant?: string, requestHeadersContentLength?: number, requestHeadersContentTypeCharsetRegistered?: boolean, requestHeadersContentTypeConcrete?: boolean, requestHeadersContentTypeQualityValue?: number, requestHeadersContentTypeSubtype?: string, requestHeadersContentTypeType?: string, requestHeadersContentTypeWildcardSubtype?: boolean, requestHeadersContentTypeWildcardType?: boolean, requestHeadersDate?: number, requestHeadersExpires?: number, requestHeadersHostAddressMCGlobal?: boolean, requestHeadersHostAddressMCLinkLocal?: boolean, requestHeadersHostAddressMCNodeLocal?: boolean, requestHeadersHostAddressMCOrgLocal?: boolean, requestHeadersHostAddressMCSiteLocal?: boolean, requestHeadersHostAddressAddress?: string, requestHeadersHostAddressAnyLocalAddress?: boolean, requestHeadersHostAddressCanonicalHostName?: string, requestHeadersHostAddressHostAddress?: string, requestHeadersHostAddressHostName?: string, requestHeadersHostAddressLinkLocalAddress?: boolean, requestHeadersHostAddressLoopbackAddress?: boolean, requestHeadersHostAddressMulticastAddress?: boolean, requestHeadersHostAddressSiteLocalAddress?: boolean, requestHeadersHostHostName?: string, requestHeadersHostHostString?: string, requestHeadersHostPort?: number, requestHeadersHostUnresolved?: boolean, requestHeadersIfMatch?: Array<string>, requestHeadersIfModifiedSince?: number, requestHeadersIfNoneMatch?: Array<string>, requestHeadersIfUnmodifiedSince?: number, requestHeadersLastModified?: number, requestHeadersLocationAbsolute?: boolean, requestHeadersLocationAuthority?: string, requestHeadersLocationFragment?: string, requestHeadersLocationHost?: string, requestHeadersLocationOpaque?: boolean, requestHeadersLocationPath?: string, requestHeadersLocationPort?: number, requestHeadersLocationQuery?: string, requestHeadersLocationRawAuthority?: string, requestHeadersLocationRawFragment?: string, requestHeadersLocationRawPath?: string, requestHeadersLocationRawQuery?: string, requestHeadersLocationRawSchemeSpecificPart?: string, requestHeadersLocationRawUserInfo?: string, requestHeadersLocationScheme?: string, requestHeadersLocationSchemeSpecificPart?: string, requestHeadersLocationUserInfo?: string, requestHeadersOrigin?: string, requestHeadersPragma?: string, requestHeadersUpgrade?: string, requestHeadersVary?: Array<string>, requestMethod?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'TRACE', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestHeadersETag !== undefined && requestHeadersETag !== null) {
            queryParameters = queryParameters.set('requestHeaders.ETag', <any>requestHeadersETag);
        }
        if (requestHeadersAcceptCharset0Registered !== undefined && requestHeadersAcceptCharset0Registered !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptCharset[0].registered', <any>requestHeadersAcceptCharset0Registered);
        }
        if (requestHeadersAcceptLanguageAsLocales0ISO3Country !== undefined && requestHeadersAcceptLanguageAsLocales0ISO3Country !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].ISO3Country', <any>requestHeadersAcceptLanguageAsLocales0ISO3Country);
        }
        if (requestHeadersAcceptLanguageAsLocales0ISO3Language !== undefined && requestHeadersAcceptLanguageAsLocales0ISO3Language !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].ISO3Language', <any>requestHeadersAcceptLanguageAsLocales0ISO3Language);
        }
        if (requestHeadersAcceptLanguageAsLocales0Country !== undefined && requestHeadersAcceptLanguageAsLocales0Country !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].country', <any>requestHeadersAcceptLanguageAsLocales0Country);
        }
        if (requestHeadersAcceptLanguageAsLocales0DisplayCountry !== undefined && requestHeadersAcceptLanguageAsLocales0DisplayCountry !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].displayCountry', <any>requestHeadersAcceptLanguageAsLocales0DisplayCountry);
        }
        if (requestHeadersAcceptLanguageAsLocales0DisplayLanguage !== undefined && requestHeadersAcceptLanguageAsLocales0DisplayLanguage !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].displayLanguage', <any>requestHeadersAcceptLanguageAsLocales0DisplayLanguage);
        }
        if (requestHeadersAcceptLanguageAsLocales0DisplayName !== undefined && requestHeadersAcceptLanguageAsLocales0DisplayName !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].displayName', <any>requestHeadersAcceptLanguageAsLocales0DisplayName);
        }
        if (requestHeadersAcceptLanguageAsLocales0DisplayScript !== undefined && requestHeadersAcceptLanguageAsLocales0DisplayScript !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].displayScript', <any>requestHeadersAcceptLanguageAsLocales0DisplayScript);
        }
        if (requestHeadersAcceptLanguageAsLocales0DisplayVariant !== undefined && requestHeadersAcceptLanguageAsLocales0DisplayVariant !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].displayVariant', <any>requestHeadersAcceptLanguageAsLocales0DisplayVariant);
        }
        if (requestHeadersAcceptLanguageAsLocales0Language !== undefined && requestHeadersAcceptLanguageAsLocales0Language !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].language', <any>requestHeadersAcceptLanguageAsLocales0Language);
        }
        if (requestHeadersAcceptLanguageAsLocales0Script !== undefined && requestHeadersAcceptLanguageAsLocales0Script !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].script', <any>requestHeadersAcceptLanguageAsLocales0Script);
        }
        if (requestHeadersAcceptLanguageAsLocales0UnicodeLocaleAttributes) {
            requestHeadersAcceptLanguageAsLocales0UnicodeLocaleAttributes.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.acceptLanguageAsLocales[0].unicodeLocaleAttributes', <any>element);
            })
        }
        if (requestHeadersAcceptLanguageAsLocales0UnicodeLocaleKeys) {
            requestHeadersAcceptLanguageAsLocales0UnicodeLocaleKeys.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.acceptLanguageAsLocales[0].unicodeLocaleKeys', <any>element);
            })
        }
        if (requestHeadersAcceptLanguageAsLocales0Variant !== undefined && requestHeadersAcceptLanguageAsLocales0Variant !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguageAsLocales[0].variant', <any>requestHeadersAcceptLanguageAsLocales0Variant);
        }
        if (requestHeadersAcceptLanguage0Range !== undefined && requestHeadersAcceptLanguage0Range !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguage[0].range', <any>requestHeadersAcceptLanguage0Range);
        }
        if (requestHeadersAcceptLanguage0Weight !== undefined && requestHeadersAcceptLanguage0Weight !== null) {
            queryParameters = queryParameters.set('requestHeaders.acceptLanguage[0].weight', <any>requestHeadersAcceptLanguage0Weight);
        }
        if (requestHeadersAccept0CharsetRegistered !== undefined && requestHeadersAccept0CharsetRegistered !== null) {
            queryParameters = queryParameters.set('requestHeaders.accept[0].charset.registered', <any>requestHeadersAccept0CharsetRegistered);
        }
        if (requestHeadersAccept0Concrete !== undefined && requestHeadersAccept0Concrete !== null) {
            queryParameters = queryParameters.set('requestHeaders.accept[0].concrete', <any>requestHeadersAccept0Concrete);
        }
        if (requestHeadersAccept0QualityValue !== undefined && requestHeadersAccept0QualityValue !== null) {
            queryParameters = queryParameters.set('requestHeaders.accept[0].qualityValue', <any>requestHeadersAccept0QualityValue);
        }
        if (requestHeadersAccept0Subtype !== undefined && requestHeadersAccept0Subtype !== null) {
            queryParameters = queryParameters.set('requestHeaders.accept[0].subtype', <any>requestHeadersAccept0Subtype);
        }
        if (requestHeadersAccept0Type !== undefined && requestHeadersAccept0Type !== null) {
            queryParameters = queryParameters.set('requestHeaders.accept[0].type', <any>requestHeadersAccept0Type);
        }
        if (requestHeadersAccept0WildcardSubtype !== undefined && requestHeadersAccept0WildcardSubtype !== null) {
            queryParameters = queryParameters.set('requestHeaders.accept[0].wildcardSubtype', <any>requestHeadersAccept0WildcardSubtype);
        }
        if (requestHeadersAccept0WildcardType !== undefined && requestHeadersAccept0WildcardType !== null) {
            queryParameters = queryParameters.set('requestHeaders.accept[0].wildcardType', <any>requestHeadersAccept0WildcardType);
        }
        if (requestHeadersAccessControlAllowCredentials !== undefined && requestHeadersAccessControlAllowCredentials !== null) {
            queryParameters = queryParameters.set('requestHeaders.accessControlAllowCredentials', <any>requestHeadersAccessControlAllowCredentials);
        }
        if (requestHeadersAccessControlAllowHeaders) {
            requestHeadersAccessControlAllowHeaders.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.accessControlAllowHeaders', <any>element);
            })
        }
        if (requestHeadersAccessControlAllowMethods) {
            requestHeadersAccessControlAllowMethods.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.accessControlAllowMethods', <any>element);
            })
        }
        if (requestHeadersAccessControlAllowOrigin !== undefined && requestHeadersAccessControlAllowOrigin !== null) {
            queryParameters = queryParameters.set('requestHeaders.accessControlAllowOrigin', <any>requestHeadersAccessControlAllowOrigin);
        }
        if (requestHeadersAccessControlExposeHeaders) {
            requestHeadersAccessControlExposeHeaders.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.accessControlExposeHeaders', <any>element);
            })
        }
        if (requestHeadersAccessControlMaxAge !== undefined && requestHeadersAccessControlMaxAge !== null) {
            queryParameters = queryParameters.set('requestHeaders.accessControlMaxAge', <any>requestHeadersAccessControlMaxAge);
        }
        if (requestHeadersAccessControlRequestHeaders) {
            requestHeadersAccessControlRequestHeaders.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.accessControlRequestHeaders', <any>element);
            })
        }
        if (requestHeadersAccessControlRequestMethod !== undefined && requestHeadersAccessControlRequestMethod !== null) {
            queryParameters = queryParameters.set('requestHeaders.accessControlRequestMethod', <any>requestHeadersAccessControlRequestMethod);
        }
        if (requestHeadersAllow) {
            requestHeadersAllow.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.allow', <any>element);
            })
        }
        if (requestHeadersCacheControl !== undefined && requestHeadersCacheControl !== null) {
            queryParameters = queryParameters.set('requestHeaders.cacheControl', <any>requestHeadersCacheControl);
        }
        if (requestHeadersConnection) {
            requestHeadersConnection.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.connection', <any>element);
            })
        }
        if (requestHeadersContentDispositionCharsetRegistered !== undefined && requestHeadersContentDispositionCharsetRegistered !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentDisposition.charset.registered', <any>requestHeadersContentDispositionCharsetRegistered);
        }
        if (requestHeadersContentDispositionCreationDate !== undefined && requestHeadersContentDispositionCreationDate !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentDisposition.creationDate', <any>requestHeadersContentDispositionCreationDate.toISOString());
        }
        if (requestHeadersContentDispositionFilename !== undefined && requestHeadersContentDispositionFilename !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentDisposition.filename', <any>requestHeadersContentDispositionFilename);
        }
        if (requestHeadersContentDispositionModificationDate !== undefined && requestHeadersContentDispositionModificationDate !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentDisposition.modificationDate', <any>requestHeadersContentDispositionModificationDate.toISOString());
        }
        if (requestHeadersContentDispositionName !== undefined && requestHeadersContentDispositionName !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentDisposition.name', <any>requestHeadersContentDispositionName);
        }
        if (requestHeadersContentDispositionReadDate !== undefined && requestHeadersContentDispositionReadDate !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentDisposition.readDate', <any>requestHeadersContentDispositionReadDate.toISOString());
        }
        if (requestHeadersContentDispositionSize !== undefined && requestHeadersContentDispositionSize !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentDisposition.size', <any>requestHeadersContentDispositionSize);
        }
        if (requestHeadersContentDispositionType !== undefined && requestHeadersContentDispositionType !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentDisposition.type', <any>requestHeadersContentDispositionType);
        }
        if (requestHeadersContentLanguageISO3Country !== undefined && requestHeadersContentLanguageISO3Country !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.ISO3Country', <any>requestHeadersContentLanguageISO3Country);
        }
        if (requestHeadersContentLanguageISO3Language !== undefined && requestHeadersContentLanguageISO3Language !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.ISO3Language', <any>requestHeadersContentLanguageISO3Language);
        }
        if (requestHeadersContentLanguageCountry !== undefined && requestHeadersContentLanguageCountry !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.country', <any>requestHeadersContentLanguageCountry);
        }
        if (requestHeadersContentLanguageDisplayCountry !== undefined && requestHeadersContentLanguageDisplayCountry !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.displayCountry', <any>requestHeadersContentLanguageDisplayCountry);
        }
        if (requestHeadersContentLanguageDisplayLanguage !== undefined && requestHeadersContentLanguageDisplayLanguage !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.displayLanguage', <any>requestHeadersContentLanguageDisplayLanguage);
        }
        if (requestHeadersContentLanguageDisplayName !== undefined && requestHeadersContentLanguageDisplayName !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.displayName', <any>requestHeadersContentLanguageDisplayName);
        }
        if (requestHeadersContentLanguageDisplayScript !== undefined && requestHeadersContentLanguageDisplayScript !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.displayScript', <any>requestHeadersContentLanguageDisplayScript);
        }
        if (requestHeadersContentLanguageDisplayVariant !== undefined && requestHeadersContentLanguageDisplayVariant !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.displayVariant', <any>requestHeadersContentLanguageDisplayVariant);
        }
        if (requestHeadersContentLanguageLanguage !== undefined && requestHeadersContentLanguageLanguage !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.language', <any>requestHeadersContentLanguageLanguage);
        }
        if (requestHeadersContentLanguageScript !== undefined && requestHeadersContentLanguageScript !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.script', <any>requestHeadersContentLanguageScript);
        }
        if (requestHeadersContentLanguageUnicodeLocaleAttributes) {
            requestHeadersContentLanguageUnicodeLocaleAttributes.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.contentLanguage.unicodeLocaleAttributes', <any>element);
            })
        }
        if (requestHeadersContentLanguageUnicodeLocaleKeys) {
            requestHeadersContentLanguageUnicodeLocaleKeys.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.contentLanguage.unicodeLocaleKeys', <any>element);
            })
        }
        if (requestHeadersContentLanguageVariant !== undefined && requestHeadersContentLanguageVariant !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLanguage.variant', <any>requestHeadersContentLanguageVariant);
        }
        if (requestHeadersContentLength !== undefined && requestHeadersContentLength !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentLength', <any>requestHeadersContentLength);
        }
        if (requestHeadersContentTypeCharsetRegistered !== undefined && requestHeadersContentTypeCharsetRegistered !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentType.charset.registered', <any>requestHeadersContentTypeCharsetRegistered);
        }
        if (requestHeadersContentTypeConcrete !== undefined && requestHeadersContentTypeConcrete !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentType.concrete', <any>requestHeadersContentTypeConcrete);
        }
        if (requestHeadersContentTypeQualityValue !== undefined && requestHeadersContentTypeQualityValue !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentType.qualityValue', <any>requestHeadersContentTypeQualityValue);
        }
        if (requestHeadersContentTypeSubtype !== undefined && requestHeadersContentTypeSubtype !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentType.subtype', <any>requestHeadersContentTypeSubtype);
        }
        if (requestHeadersContentTypeType !== undefined && requestHeadersContentTypeType !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentType.type', <any>requestHeadersContentTypeType);
        }
        if (requestHeadersContentTypeWildcardSubtype !== undefined && requestHeadersContentTypeWildcardSubtype !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentType.wildcardSubtype', <any>requestHeadersContentTypeWildcardSubtype);
        }
        if (requestHeadersContentTypeWildcardType !== undefined && requestHeadersContentTypeWildcardType !== null) {
            queryParameters = queryParameters.set('requestHeaders.contentType.wildcardType', <any>requestHeadersContentTypeWildcardType);
        }
        if (requestHeadersDate !== undefined && requestHeadersDate !== null) {
            queryParameters = queryParameters.set('requestHeaders.date', <any>requestHeadersDate);
        }
        if (requestHeadersExpires !== undefined && requestHeadersExpires !== null) {
            queryParameters = queryParameters.set('requestHeaders.expires', <any>requestHeadersExpires);
        }
        if (requestHeadersHostAddressMCGlobal !== undefined && requestHeadersHostAddressMCGlobal !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.MCGlobal', <any>requestHeadersHostAddressMCGlobal);
        }
        if (requestHeadersHostAddressMCLinkLocal !== undefined && requestHeadersHostAddressMCLinkLocal !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.MCLinkLocal', <any>requestHeadersHostAddressMCLinkLocal);
        }
        if (requestHeadersHostAddressMCNodeLocal !== undefined && requestHeadersHostAddressMCNodeLocal !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.MCNodeLocal', <any>requestHeadersHostAddressMCNodeLocal);
        }
        if (requestHeadersHostAddressMCOrgLocal !== undefined && requestHeadersHostAddressMCOrgLocal !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.MCOrgLocal', <any>requestHeadersHostAddressMCOrgLocal);
        }
        if (requestHeadersHostAddressMCSiteLocal !== undefined && requestHeadersHostAddressMCSiteLocal !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.MCSiteLocal', <any>requestHeadersHostAddressMCSiteLocal);
        }
        if (requestHeadersHostAddressAddress !== undefined && requestHeadersHostAddressAddress !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.address', <any>requestHeadersHostAddressAddress);
        }
        if (requestHeadersHostAddressAnyLocalAddress !== undefined && requestHeadersHostAddressAnyLocalAddress !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.anyLocalAddress', <any>requestHeadersHostAddressAnyLocalAddress);
        }
        if (requestHeadersHostAddressCanonicalHostName !== undefined && requestHeadersHostAddressCanonicalHostName !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.canonicalHostName', <any>requestHeadersHostAddressCanonicalHostName);
        }
        if (requestHeadersHostAddressHostAddress !== undefined && requestHeadersHostAddressHostAddress !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.hostAddress', <any>requestHeadersHostAddressHostAddress);
        }
        if (requestHeadersHostAddressHostName !== undefined && requestHeadersHostAddressHostName !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.hostName', <any>requestHeadersHostAddressHostName);
        }
        if (requestHeadersHostAddressLinkLocalAddress !== undefined && requestHeadersHostAddressLinkLocalAddress !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.linkLocalAddress', <any>requestHeadersHostAddressLinkLocalAddress);
        }
        if (requestHeadersHostAddressLoopbackAddress !== undefined && requestHeadersHostAddressLoopbackAddress !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.loopbackAddress', <any>requestHeadersHostAddressLoopbackAddress);
        }
        if (requestHeadersHostAddressMulticastAddress !== undefined && requestHeadersHostAddressMulticastAddress !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.multicastAddress', <any>requestHeadersHostAddressMulticastAddress);
        }
        if (requestHeadersHostAddressSiteLocalAddress !== undefined && requestHeadersHostAddressSiteLocalAddress !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.address.siteLocalAddress', <any>requestHeadersHostAddressSiteLocalAddress);
        }
        if (requestHeadersHostHostName !== undefined && requestHeadersHostHostName !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.hostName', <any>requestHeadersHostHostName);
        }
        if (requestHeadersHostHostString !== undefined && requestHeadersHostHostString !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.hostString', <any>requestHeadersHostHostString);
        }
        if (requestHeadersHostPort !== undefined && requestHeadersHostPort !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.port', <any>requestHeadersHostPort);
        }
        if (requestHeadersHostUnresolved !== undefined && requestHeadersHostUnresolved !== null) {
            queryParameters = queryParameters.set('requestHeaders.host.unresolved', <any>requestHeadersHostUnresolved);
        }
        if (requestHeadersIfMatch) {
            requestHeadersIfMatch.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.ifMatch', <any>element);
            })
        }
        if (requestHeadersIfModifiedSince !== undefined && requestHeadersIfModifiedSince !== null) {
            queryParameters = queryParameters.set('requestHeaders.ifModifiedSince', <any>requestHeadersIfModifiedSince);
        }
        if (requestHeadersIfNoneMatch) {
            requestHeadersIfNoneMatch.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.ifNoneMatch', <any>element);
            })
        }
        if (requestHeadersIfUnmodifiedSince !== undefined && requestHeadersIfUnmodifiedSince !== null) {
            queryParameters = queryParameters.set('requestHeaders.ifUnmodifiedSince', <any>requestHeadersIfUnmodifiedSince);
        }
        if (requestHeadersLastModified !== undefined && requestHeadersLastModified !== null) {
            queryParameters = queryParameters.set('requestHeaders.lastModified', <any>requestHeadersLastModified);
        }
        if (requestHeadersLocationAbsolute !== undefined && requestHeadersLocationAbsolute !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.absolute', <any>requestHeadersLocationAbsolute);
        }
        if (requestHeadersLocationAuthority !== undefined && requestHeadersLocationAuthority !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.authority', <any>requestHeadersLocationAuthority);
        }
        if (requestHeadersLocationFragment !== undefined && requestHeadersLocationFragment !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.fragment', <any>requestHeadersLocationFragment);
        }
        if (requestHeadersLocationHost !== undefined && requestHeadersLocationHost !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.host', <any>requestHeadersLocationHost);
        }
        if (requestHeadersLocationOpaque !== undefined && requestHeadersLocationOpaque !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.opaque', <any>requestHeadersLocationOpaque);
        }
        if (requestHeadersLocationPath !== undefined && requestHeadersLocationPath !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.path', <any>requestHeadersLocationPath);
        }
        if (requestHeadersLocationPort !== undefined && requestHeadersLocationPort !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.port', <any>requestHeadersLocationPort);
        }
        if (requestHeadersLocationQuery !== undefined && requestHeadersLocationQuery !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.query', <any>requestHeadersLocationQuery);
        }
        if (requestHeadersLocationRawAuthority !== undefined && requestHeadersLocationRawAuthority !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.rawAuthority', <any>requestHeadersLocationRawAuthority);
        }
        if (requestHeadersLocationRawFragment !== undefined && requestHeadersLocationRawFragment !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.rawFragment', <any>requestHeadersLocationRawFragment);
        }
        if (requestHeadersLocationRawPath !== undefined && requestHeadersLocationRawPath !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.rawPath', <any>requestHeadersLocationRawPath);
        }
        if (requestHeadersLocationRawQuery !== undefined && requestHeadersLocationRawQuery !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.rawQuery', <any>requestHeadersLocationRawQuery);
        }
        if (requestHeadersLocationRawSchemeSpecificPart !== undefined && requestHeadersLocationRawSchemeSpecificPart !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.rawSchemeSpecificPart', <any>requestHeadersLocationRawSchemeSpecificPart);
        }
        if (requestHeadersLocationRawUserInfo !== undefined && requestHeadersLocationRawUserInfo !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.rawUserInfo', <any>requestHeadersLocationRawUserInfo);
        }
        if (requestHeadersLocationScheme !== undefined && requestHeadersLocationScheme !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.scheme', <any>requestHeadersLocationScheme);
        }
        if (requestHeadersLocationSchemeSpecificPart !== undefined && requestHeadersLocationSchemeSpecificPart !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.schemeSpecificPart', <any>requestHeadersLocationSchemeSpecificPart);
        }
        if (requestHeadersLocationUserInfo !== undefined && requestHeadersLocationUserInfo !== null) {
            queryParameters = queryParameters.set('requestHeaders.location.userInfo', <any>requestHeadersLocationUserInfo);
        }
        if (requestHeadersOrigin !== undefined && requestHeadersOrigin !== null) {
            queryParameters = queryParameters.set('requestHeaders.origin', <any>requestHeadersOrigin);
        }
        if (requestHeadersPragma !== undefined && requestHeadersPragma !== null) {
            queryParameters = queryParameters.set('requestHeaders.pragma', <any>requestHeadersPragma);
        }
        if (requestHeadersUpgrade !== undefined && requestHeadersUpgrade !== null) {
            queryParameters = queryParameters.set('requestHeaders.upgrade', <any>requestHeadersUpgrade);
        }
        if (requestHeadersVary) {
            requestHeadersVary.forEach((element) => {
                queryParameters = queryParameters.append('requestHeaders.vary', <any>element);
            })
        }
        if (requestMethod !== undefined && requestMethod !== null) {
            queryParameters = queryParameters.set('requestMethod', <any>requestMethod);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.configuration.basePath}/file/upload`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
